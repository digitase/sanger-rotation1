Program: pbwt
Version: 3.0-c9764e2 (using htslib 1.3.2-132-g609120d)
Contact: Richard Durbin [rd@sanger.ac.uk]
Usage: pbwt [ -<command> [options]* ]+
Commands:
  -log <file>               log file; '-' for stderr
  -check                    do various checks
  -stats                    print stats depending on commands; writes to stdout
  -read <file>              read pbwt file; '-' for stdin
  -readSites <file>         read sites file; '-' for stdin
  -readSamples <file>       read samples file; '-' for stdin
  -readMissing <file>       read missing file; '-' for stdin
  -readDosage <file>        read dosage file; '-' for stdin
  -readReverse <file>       read reverse file; '-' for stdin
  -readAll <rootname>       read .pbwt and if present .sites, .samples, .missing - note not by default dosage
  -readVcfGT <file>         read GTs from vcf or bcf file; '-' for stdin vcf only ; biallelic sites only - require diploid!
  -readVcfPL <file>         read PLs from vcf or bcf file; '-' for stdin vcf only ; biallelic sites only - require diploid!
  -readMacs <file>          read MaCS output file; '-' for stdin
  -readVcfq <file>          read VCFQ file; '-' for stdin
  -readGen <file> <chrom>   read impute2 gen file - must set chrom
  -readHap <file> <chrom>   read impute2 hap file - must set chrom
  -readHapLegend <hap_file> <legend_file> <chrom>
                            read impute2 hap and legend file - must set chrom
  -readPhase <file>         read Li and Stephens phase file
  -checkpoint <n>           checkpoint every n sites while reading
  -merge <file> ...         merge two or more pbwt files
  -write <file>             write pbwt file; '-' for stdout
  -writeSites <file>        write sites file; '-' for stdout
  -writeSamples <file>      write samples file; '-' for stdout
  -writeMissing <file>      write missing file; '-' for stdout
  -writeDosage <file>       write missing file; '-' for stdout
  -writeReverse <file>      write reverse file; '-' for stdout
  -writeAll <rootname>      write .pbwt and if present .sites, .samples, .missing, .dosage
  -writeImputeRef <rootname> write .imputeHaps and .imputeLegend
  -writeImputeHapsG <file>  write haplotype file for IMPUTE -known_haps_g
  -writePhase <file>        write FineSTRUCTURE/ChromoPainter input format (Impute/ShapeIT output format) phase file
  -writeTransposeHaplotypes <file>    write transposed haplotype file (one hap per row); '-' for stdout
  -haps <file>              write haplotype file; '-' for stdout
  -writeGen <file>          write impute2 gen file; '-' for stdout
  -writeVcf|-writeVcfGz|-writeBcf|-writeBcfGz <file>
                            write VCF or BCF; uncompressed or bgzip (Gz) compressed file; '-' for stdout
  -referenceFasta <file>    reference fasta filename for VCF/BCF writing (optional)
  -subsites <fmin> <frac>   subsample <frac> sites with AF > <fmin>
  -subsample <start> <n>    subsample <n> samples from index <start>
  -subrange <start> <end>   cut down to sites in [start,end)
  -corruptSites <p> <q>     randomise fraction q of positions at fraction p of sites, according to site frequency
  -corruptSamples <p> <q>   randomise fraction q of positions for fraction p of samples, according to site frequency
  -copySamples <M> <len>    make M new samples copied from current haplotypes with mean switch length len
  -selectSites <file>       select sites as in sites file
  -removeSites <file>       remove sites as in sites file
  -selectSamples <file>     select samples as in samples file
  -longWithin <L>           find matches within set longer than L
  -maxWithin                find maximal matches within set
  -matchNaive <file>        maximal match seqs in pbwt file to reference
  -matchIndexed <file>      maximal match seqs in pbwt file to reference
  -matchDynamic <file>      maximal match seqs in pbwt file to reference
  -imputeExplore <n>        n'th impute test
  -phase <n>                phase with n sparse pbwts
  -referencePhase <root>    phase current pbwt against reference whose root name is the argument - only keeps shared sites
  -referenceImpute <root> [nSparse=1] [fSparse=1]  impute current pbwt into reference whose root name is the first argument;
                            does not rephase either pbwt; optional nSparse > 1 also does sparse matching, fSparse is relative weight
  -genotypeCompare <root>   compare genotypes with those from reference whose root name is the argument - need compatible sites
  -imputeMissing            impute data marked as missing
  -fitAlphaBeta <model>     fit probabilistic model 1..3
  -llCopyModel <theta> <rho>  log likelihood of Li-Stephens model
  -paint <fileNameRoot> [n] output painting co-ancestry matrix to fileroot, optionally specififying the number per region
  -paintSparse <fileNameRoot> [n] output sparse painting to fileroot, optionally specififying the number per region
  -pretty <file> <k>        pretty plot at site k
  -sfs                      print site frequency spectrum (log scale) - also writes sites.freq file
  -refFreq <file>           read site frequency information into the refFreq field of current sites
  -siteInfo <file> <kmin> <kmax> export PBWT information at sites with allele count kmin <= k < kmax
  -buildReverse             build reverse pbwt
  -readGeneticMap <file>    read Oxford format genetic map file
  -4hapsStats               mu:rho 4 hap test stats
